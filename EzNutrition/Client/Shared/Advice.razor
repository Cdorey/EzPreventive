@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using EzNutrition.Client.Models
@using EzNutrition.Client.Models.DietarySurvey
@using EzNutrition.Shared.Data.DTO.PromptDto
@using EzNutrition.Shared.Policies
@using Markdig
@inject IHttpClientFactory HttpClientFactory
<AuthorizeView Policy="@PolicyList.Prescription">
    <Authorized>
        @if (CurrentArchive.AdvicePrompt is not null && CurrentArchive.AiGeneratedAdvice is not null)
        {
            @if (!CurrentArchive.AiGeneratedAdvice.IsReady)
            {
                <Result Status="ResultStatus.Warning" Title="数据发送至第三方警示">
                    <Extra>
                        <Title Level="4">免责声明</Title>
                        <Paragraph>
                            请求AI见解必须将以下数据发送给EzNutrition后端的AI代理，这些数据不可避免地会被安全审查日志和AI模型的供应商记录。<br />
                            请确定您的操作符合您所在地区的卫生行政部门的规定。<br />
                            AI生成的内容必须经过营养专业的医务人员审核，不构成任何医疗建议，也不附带任何明示或暗示的保证。
                        </Paragraph>

                        <Divider />

                        <Title Level="4">当前 AI 代理信息</Title>
                        @if (Environment is not null)
                        {
                            <Paragraph>模型的提供者：@Environment.ProviderName</Paragraph>
                            <Paragraph>模型调用选择：@Environment.PlatformDetails</Paragraph>
                            <Paragraph>模型生成参数：@Environment.AdditionalInfo</Paragraph>
                        }
                        else
                        {
                            <Paragraph>AI环境信息加载失败或尚未获取。</Paragraph>
                        }

                        <Divider />

                        <Title Level="4">发送给AI代理的数据</Title>
                        <Paragraph>
                            @((MarkupString)Markdig.Markdown.ToHtml(@$"```json{System.Environment.NewLine}{JsonSerializer.Serialize(CurrentArchive.AdvicePrompt)}{System.Environment.NewLine}```", pipeline))
                        </Paragraph>

                        <Divider />

                        <Button OnClick="GenerateAsync" AutoLoading Disabled="@(CurrentArchive.AiGeneratedAdvice.Sending)">同意并发送数据</Button>
                        <Button OnClick="CancelSend" Type="default" Disabled="@(CurrentArchive.AiGeneratedAdvice.Sending)">取消</Button>
                    </Extra>
                </Result>

            }
            <Title Level="4">助理的思考过程</Title>
            @CurrentArchive.AiGeneratedAdvice.ReasoningContent
            <Title Level="4">助理的膳食建议草稿</Title>
            @((MarkupString)Markdig.Markdown.ToHtml(CurrentArchive.AiGeneratedAdvice.Content, pipeline))
        }
        else
        {
            <Result Status="ResultStatus.Http404" Title="在完成能量分析、膳食调查和门诊病史后可以在这里请求AI生成见解">
                <Extra>
                    <Button OnClick="MakePrompt">荟萃并准备数据</Button>
                </Extra>
            </Result>
        }
    </Authorized>
    <NotAuthorized>
        <Paragraph>生成饮食建议和健康教育处方功能仅限认证的营养相关专业人员调用</Paragraph>
        <Paragraph>基于医学目的使用本功能限定已经取得卫生行政部门认可的资质，医师或营养师资格</Paragraph>
        <Paragraph>基于教育教学目的使用本功能限定营养及营养相关专业的高校师生</Paragraph>
        <Paragraph>详情内容参见用户中心→专业资质认证申请</Paragraph>
        <Paragraph>请勿使用epiman测试账号提交申请</Paragraph>
    </NotAuthorized>
</AuthorizeView>
@code {
    MarkdownPipeline pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
    private EnvironmentDto? Environment { get; set; }

    [Parameter, EditorRequired]
    public required Archive CurrentArchive { get; set; }

    private async Task GenerateAsync()
    {
        if (CurrentArchive.AdvicePrompt is null || CurrentArchive.AiGeneratedAdvice is null)
        {
            return;
        }

        // if (CurrentArchive.AiGeneratedAdvice.Sending)
        // {
        //     StateHasChanged();
        //     return;
        // }

        CurrentArchive.AiGeneratedAdvice.Sending = true;
        // 1. 构造 POST 请求
        var request = new HttpRequestMessage(HttpMethod.Post, "Prescription/Generate");
        request.SetBrowserResponseStreamingEnabled(true); // 启用流式

        // 2. 将 promptDto 序列化为 JSON，放到 Body
        var json = JsonSerializer.Serialize(CurrentArchive.AdvicePrompt);
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        // 3. 通过 HttpClientFactory 获取客户端
        var httpClient = HttpClientFactory.CreateClient("Authorize");

        // 4. 发送请求并使用流模式读取响应
        using var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
        response.EnsureSuccessStatusCode(); // 如果希望在出错时抛异常可用

        using var stream = await response.Content.ReadAsStreamAsync();
        using var reader = new StreamReader(stream);

        string? line;
        // 5. 循环读取 SSE 流，直到读到 [DONE] 或结束
        while ((line = await reader.ReadLineAsync()) is not null)
        {
            if (string.IsNullOrWhiteSpace(line))
                continue;

            if (line.StartsWith("data: "))
            {
                var jsonLine = line.Substring("data: ".Length).Trim();
                if (jsonLine == "[DONE]")
                    break;

                var chunk = JsonSerializer.Deserialize<AiResultDto>(jsonLine);
                if (chunk != null)
                {
                    if (chunk.IsReasoningContent)
                    {
                        CurrentArchive.AiGeneratedAdvice.ReasoningContent += chunk.Content;
                    }
                    else
                    {
                        CurrentArchive.AiGeneratedAdvice.Content += chunk.Content;
                    }
                    StateHasChanged();
                }
            }
        }
        CurrentArchive.AiGeneratedAdvice.IsReady = true;
    }

    private void MakePrompt()
    {
        if (CurrentArchive.CurrentEnergyCalculator is null)
        {
            return;
        }


        var prompt = new PromptDto
            {
                PatientInfo = new PatientInfo
                {
                    Gender = CurrentArchive.Client.Gender,
                    Age = CurrentArchive.Client.Age,
                    BMI = CurrentArchive.CurrentEnergyCalculator.BMI,
                    PAL = CurrentArchive.CurrentEnergyCalculator.PAL,
                    Height = CurrentArchive.Client.Height,
                    Width = CurrentArchive.Client.Weight,
                    TotalBalanceEnergyViaCalculationg = CurrentArchive.CurrentEnergyCalculator.Energy,
                    SpecialPhysiologicalPeriod = CurrentArchive.Client.SpecialPhysiologicalPeriod,
                },
            };

        if (CurrentArchive.DietaryRecallSurvey is not null && CurrentArchive.DietaryRecallSurvey.SummaryRows.Count > 0)
        {
            var dietaryRecallSurvery = new EzNutrition.Shared.Data.DTO.PromptDto.DietaryRecallSurvey
                {
                    DeficientNutrients = CurrentArchive.DietaryRecallSurvey.SummaryRows.Where(x => x.Flag == Flags.Lower).Select(x => x.FriendlyName).ToArray(),
                    ExcessiveNutrients = CurrentArchive.DietaryRecallSurvey.SummaryRows.Where(x => x.Flag == Flags.Higher).Select(x => x.FriendlyName).ToArray(),
                };
            prompt.DietaryRecallSurvey = dietaryRecallSurvery;
        }

        CurrentArchive.AdvicePrompt = prompt;
        StateHasChanged();
    }

    private void CancelSend()
    {
        CurrentArchive.AdvicePrompt = null;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("Authorize");
            Environment = await httpClient.GetFromJsonAsync<EnvironmentDto>("Prescription/Environment");
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Forbidden)
        {
            Console.WriteLine($"无法加载AI环境信息: {ex.Message}");
        }
        finally
        {
            CurrentArchive.AiGeneratedAdvice ??= new AiGeneratedAdvice();
        }
        await base.OnInitializedAsync();
    }
}