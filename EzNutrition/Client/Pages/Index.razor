@page "/"
@using EzNutrition.Client.Models;
@using EzNutrition.Client.Services;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel
@inject IHttpClientFactory HttpClientFactory
@inject UserSessionService UserSession

<PageTitle>首页</PageTitle>
@if (UserSession.UserInfo == default)
{
    <GridRow Gutter="(16,16)">
        <GridCol Lg="18" Md="24">
            <article>
                <Title>公共卫生医师营养台账</Title>
                <Paragraph>您好，同行：</Paragraph>
                <Paragraph>在工作之余，我开发了这个工具，旨在协助我们更便捷地进行食谱计算。这个工具具备自定义计算功能和营养分析，可以有效节省时间，提升我们的服务质量。</Paragraph>

                <Paragraph>本工具源代码依照AGPL-3.0许可<a href="https://github.com/Cdorey/EzPreventive/">公开</a>，如果您是注册的公共卫生执业医师，或者是注册在预防保健专业、儿童保健专业、妇女保健专业的临床执业医师，或者是工作在高校公共卫生学院的教职工，如有需要可通过邮件向我申请MIT许可。</Paragraph>

                <Paragraph>我诚挚邀请您尝试使用这一工具，无论是日常工作中应用，还是分享给其他预防医学专业的同仁。目前，这一工具仍有一些不完善之处，尤其是自动生成的膳食建议可能还需进一步改进。在给患者或居民医学建议之前，请务必仔细核查相关信息的合理性。</Paragraph>

                <Paragraph>此外，尽管营养专业长期以来一直属于预防医学范畴，但某些对公卫执业规则不认可的地区我们从事营养咨询和营养治疗工作可能存在违规风险。请务必确保您的行为不违反所在地区卫生行政部门的要求。</Paragraph>

                <Paragraph>期待我们的合作能够为公共卫生事业带来更大的推动力。如有任何疑问或需要进一步信息和支持，请随时<a href="mailto://bsense@live.com">与我联系</a>。</Paragraph>

                <Paragraph>祝愿您在工作中取得更卓越的成就！</Paragraph>

                <Paragraph class="font-italic">诚挚问候，<br />CdoreyPoisson</Paragraph>
            </article>
        </GridCol>
        <GridCol Lg="18" Md="24">
            <Title Level="3">登录以开始</Title>
            <Paragraph>BBS测试用户EpiMan，密码I_am_epiman</Paragraph>
            <Paragraph>这个账户不能用于调整模型，不过反正调整模型功能暂时还没做出来</Paragraph>
            <Form Model="@innerModel">
                <FormItem Label="用户名">
                    <Input @bind-Value="@context.Username" />
                </FormItem>
                <FormItem Label="密码">
                    <InputPassword @bind-Value="@context.Password" />
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" OnClick="Login">登录</Button>
                    <Button OnClick="Regist">注册</Button>
                </FormItem>
            </Form>
            @if (!string.IsNullOrEmpty(errorInfo))
            {
                <Alert Message=@errorInfo Type="@AlertType.Error" />
            }
        </GridCol>
    </GridRow>
}
else
{
    <GridRow Gutter="(16,16)">
        <GridCol Lg="18" Md="24">
            <article>
                <Title>公共卫生医师营养台账</Title>
                <Paragraph>您好，同行</Paragraph>
                <Paragraph>提示：</Paragraph>
                <Paragraph>
                    <ol>
                        <li>EzNutrition服务器不会保存所有的咨询对象信息，未来也不会有此计划，因此请根据您的业务需要自行在您的电脑上保存</li>
                        <li>当前能量模型直接按照15%P、25%F、60%C的方式分配宏量营养素，尚未实装AMDR，这在绝大多数健康的成年人群体中是正确的，但是婴幼儿、特定疾病或生理状况下能量分配比应当适当调整，我会尽快实装DRIs模块，目前对上述特殊人群请谨慎使用</li>
                        <li>当前版本，儿保和妇保营养咨询请务必谨慎使用模型计算结论，有诸多参数尚需斟酌调整！！</li>
                        <li>当前有且只有一个功能，根据咨询对象的基本信息自动核算能量、三餐配比、产生食物交换份模型和膳食建议，点击菜单栏的“<a href="/maintreatment">基本处理</a>”按钮开始使用</li>
                        <li>未来计划尽快加入完整的DRIs数据，目前暂时仅有EER实装</li>
                        <li>未来计划加入辅助膳食调查计算和集成常见的营养学评价量表功能，优先级在DRIs之后</li>
                        <li>未来计划开发一个本地客户端程序，可以辅助在本地电脑中保存和管理咨询对象的数据，目前尚在构思中，优先级在计算和量表之后</li>
                    </ol>
                </Paragraph>

                <Paragraph class="font-italic">诚挚问候，<br />CdoreyPoisson</Paragraph>
            </article>
        </GridCol>
    </GridRow>
}

@code {
    public class Model
    {
        [Required, DisplayName("User Name")]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    private Model innerModel = new Model();

    private string? errorInfo;

    protected override async Task OnInitializedAsync()
    {
        UserSession.AuthenticationStateChanged += (e) =>
        {
            StateHasChanged();
        };
        await base.OnInitializedAsync();
    }

    private async Task Login()
    {
        try
        {
            await UserSession.SignInAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }

    private async Task Regist()
    {
        try
        {
            await UserSession.RegistAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }
}

