@page "/"
@using EzNutrition.Client.Models;
@using EzNutrition.Client.Services;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel
@using Markdig
@inject IHttpClientFactory HttpClientFactory
@inject UserSessionService UserSession

<PageTitle>首页</PageTitle>
@if (UserSession.UserInfo == default)
{
    <GridRow Gutter="(16,16)">
        <GridCol Lg="18" Md="24">
            <article>
                @if (string.IsNullOrEmpty(UserSession.CoverLetter))
                {
                    <Skeleton Active />
                }
                else
                {
                    @((MarkupString)Markdown.ToHtml(UserSession.CoverLetter))
                }
            </article>
        </GridCol>
        <GridCol Lg="18" Md="24">
            <Title Level="3">登录以开始</Title>
            <Paragraph>BBS测试用户EpiMan，密码I_am_epiman</Paragraph>
            <Paragraph>这个账户不能用于调整模型，不过反正调整模型功能暂时还没做出来</Paragraph>
            <Form Model="@innerModel">
                <FormItem Label="用户名">
                    <Input @bind-Value="@context.Username" />
                </FormItem>
                <FormItem Label="密码">
                    <InputPassword @bind-Value="@context.Password" />
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" OnClick="Login">登录</Button>
                    <Button OnClick="Regist">注册</Button>
                </FormItem>
            </Form>
            @if (!string.IsNullOrEmpty(errorInfo))
            {
                <Alert Message=@errorInfo Type="@AlertType.Error" />
            }
        </GridCol>
    </GridRow>
}
else
{
    <GridRow Gutter="(16,16)">
        <GridCol Lg="18" Md="24">
            <article>
                @((MarkupString)Markdown.ToHtml(UserSession.Notice))
            </article>
        </GridCol>
    </GridRow>
}

@code {
    public class Model
    {
        [Required, DisplayName("User Name")]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    private Model innerModel = new Model();

    private string? errorInfo;

    protected override async Task OnInitializedAsync()
    {
        UserSession.AuthenticationStateChanged += (e) =>
        {
            StateHasChanged();
        };
        await base.OnInitializedAsync();
    }

    private async Task Login()
    {
        try
        {
            await UserSession.SignInAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }

    private async Task Regist()
    {
        try
        {
            await UserSession.RegistAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }

    protected override void OnInitialized()
    {
        UserSession.OnStateChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        UserSession.OnStateChanged -= StateHasChanged;
    }
}

