@page "/administrators"
@using EzNutrition.Shared.Data.DTO
@using EzNutrition.Shared.Policies
@inject IHttpClientFactory HttpClientFactory
<Title Level="1">Administrators</Title>
<AuthorizeView Policy="@PolicyList.Admin">
    <Authorized>
        <Title Level="2">注册用户列表</Title>
        <Table TItem="UserDto" DataSource="UserList">
            <ChildContent Context="userListContext">
                <GenerateColumns />
                <ActionColumn Title="Operate">
                    <Space>
                        <SpaceItem>
                            <Button Danger OnClick="(x)=>EditBtnClick(userListContext)" AutoLoading>
                                Edit
                            </Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ChildContent>
        </Table>
        <Title Level="2">专业认证申请列表</Title>
        <Table TItem="ProfessionalCertificationRequestDto" DataSource="ProfessionalCertificationRequestList">
            <ChildContent Context="requestListContext">
                <GenerateColumns />
                <ActionColumn Title="Operate">
                    <Space>
                        <SpaceItem>
                            <Button Danger>
                                Edit
                            </Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ChildContent>
        </Table>
        <Drawer Closable="true" @bind-Visible="drawerVisible" Title="@("编辑用户信息")">
            @if (userInfoDto is not null)
            {
                <Form Model="@userInfoDto">
                    <ChildContent Context="userDtoContext">
                        <FormItem Label="用户名">
                            <Input @bind-Value="userDtoContext.UserName" />
                        </FormItem>
                        <FormItem Label="邮箱">
                            <Input @bind-Value="userDtoContext.Email" />
                        </FormItem>
                        <FormItem Label="电话">
                            <Input @bind-Value="userDtoContext.PhoneNumber" />
                        </FormItem>
                    </ChildContent>
                </Form>
            }
        </Drawer>
    </Authorized>
    <NotAuthorized>
        <Paragraph>你没有足够权限访问此内容。</Paragraph>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<UserDto> UserList { get; } = [];
    private UserInfoDto? userInfoDto;

    private Guid currentRequestId = Guid.Empty;
    private List<ProfessionalCertificationRequestDto> ProfessionalCertificationRequestList { get; } = [];
    private ProfessionalCertificationRequestDto? requestDto => ProfessionalCertificationRequestList.FirstOrDefault(x => x.Id == currentRequestId);

    private bool drawerVisible = false;

    private async Task EditBtnClick(object dataContext)
    {
        userInfoDto = null;
        currentRequestId = Guid.Empty;
        if (dataContext is UserDto user)
        {
            using var httpClient = HttpClientFactory.CreateClient("Authorize");
            var getRes = await httpClient.GetFromJsonAsync<UserInfoDto>($"Admin/GetUserInfo/{user.Id}");
            if (getRes is not null)
            {
                userInfoDto = getRes;
                drawerVisible = true;
            }
        }
        else if (dataContext is ProfessionalCertificationRequestDto requestDto)
        {
            using var httpClient = HttpClientFactory.CreateClient("Authorize");
            var getRes = await httpClient.GetFromJsonAsync<UserInfoDto>($"Admin/GetUserInfo/{requestDto.UserId}");
            if (getRes is not null)
            {
                userInfoDto = getRes;
                currentRequestId = requestDto.Id;
                drawerVisible = true;
            }
        }
    }

    private async Task GetUserList()
    {
        UserList.Clear();
        using var httpClient = HttpClientFactory.CreateClient("Authorize");
        var getRes = await httpClient.GetFromJsonAsync<List<UserDto>>($"Admin/GetUsers");
        UserList.AddRange(getRes!);
    }

    private async Task GetCertificationRequestList()
    {
        ProfessionalCertificationRequestList.Clear();
        using var httpClient = HttpClientFactory.CreateClient("Authorize");
        var getRes = await httpClient.GetFromJsonAsync<List<ProfessionalCertificationRequestDto>>($"Admin/ProfessionalCertificationRequests");
        ProfessionalCertificationRequestList.AddRange(getRes!);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserList();
        await GetCertificationRequestList();
        await base.OnInitializedAsync();
    }
}