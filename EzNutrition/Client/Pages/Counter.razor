@page "/counter"
@using EzNutrition.Shared.Data.Entities;
@using EzNutrition.Shared.Utilities;
@using System.Security.Claims;
@using System.IdentityModel.Tokens.Jwt;
@inject HttpClient Http

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

@if (token == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><em>@token</em></p>
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


<Select TItem="Person" TItemValue="string" DataSource="@_persons" @bind-Value="@_selectedValue" LabelName="@nameof(Person.Name)" ValueName="@nameof(Person.Value)" Placeholder="Select a person" DefaultActiveFirstOption="false" EnableSearch OnSelectedItemChanged="OnSelectedItemChangedHandler" />
 <br />
 <br />
 <p>
     Selected Value: @_selectedValue <br />
     Selected Item Name: @_selectedItem?.Name
 </p>

 @code
 {
    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    List<Person> _persons;
    string _selectedValue;
    Person _selectedItem;

    protected override void OnInitialized()
    {
        _persons = new List<Person>
        {
            new Person { Value = "jack", Name = "Jack" },
            new Person { Value = "lucy", Name = "Lucy" },
            new Person { Value = "tom" , Name = "Tom" }
        };
    }

    private void OnSelectedItemChangedHandler(Person value)
    {
        _selectedItem = value;
        Console.WriteLine($"selected: ${value?.Name}");
    }

    @*     private void OnBlur()
    {
        Console.WriteLine("blur");
    }

    private void OnFocus()
    {
        Console.WriteLine("focus");
    }

    private void OnSearch(string value)
    {
        Console.WriteLine($"search: {value}");
    }
 *@
    private string? token;

    private Claim[]? userClaims;

    protected void ParseToken()
    {
        if (!string.IsNullOrEmpty(token))
        {
            // 使用令牌解析用户信息
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtToken = tokenHandler.ReadJwtToken(token);
            userClaims = jwtToken.Claims.ToArray();
        }
    }

    private async Task IncrementCount()
    {
        try
        {
            if (token == null)
            {
                var formContent = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("username", "Test_User"), new KeyValuePair<string, string>("password", "") });
                var res = await Http.PostAsync("Auth", formContent);
                if (res.IsSuccessStatusCode)
                {
                    token = await res.Content.ReadAsStringAsync();
                    ParseToken();
                }
                else
                {

                }
            }
            else
            {
                token = await Http.GetAuthorizedStringAsync(token, "Auth/Test");
            }
        }
        catch (Exception ex)
        {

        }

    }
}
