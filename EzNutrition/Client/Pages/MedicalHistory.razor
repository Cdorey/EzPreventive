@page "/medicalhistory"
@using EzNutrition.Client.Services;
@using EzNutrition.Shared.Data.Entities;
@using EzNutrition.Shared.Utilities;
@inject HttpClient Http
@inject UserSessionService UserSession
@inject NavigationManager Navigation

<Title Level="2">病史记录</Title>
<Space Direction="DirectionVHType.Vertical" style="width: 100%;">
    <SpaceItem>
        <Select TItem="Disease" TItemValue="int" DataSource="@diseasesInDB" LabelName="@nameof(Disease.FriendlyName)" ValueName="@nameof(Disease.DiseaseId)" Placeholder="请选择既往史" DefaultActiveFirstOption="false" EnableSearch OnSelectedItemChanged="OnSelectedItemChangedHandler" />
     </SpaceItem>
     <SpaceItem>
         <Table TItem="Disease" DataSource="@Diseases" HidePagination=true>
             <PropertyColumn Property="r=>r.ICD10">
                 @(context.ICD10 ?? "尚未实现")
            </PropertyColumn>
            <PropertyColumn Property="r=>r.FriendlyName">
                @context.FriendlyName
            </PropertyColumn>
            <ActionColumn Title="操作">
                <Button OnClick="async () =>await RemoveRecord(context)">删除记录</Button>
            </ActionColumn>
        </Table>
    </SpaceItem>
</Space>

@code {
    private List<Disease>? diseasesInDB;

    public List<Disease> Diseases { get; set; } = new List<Disease>();

    [Parameter]
    public List<Advice> Advices { get; set; } = new List<Advice>();

    [Parameter]
    public EventCallback<List<Advice>> AdviceDataChanged { get; set; }

    private bool IsRemoveDisabled => Diseases.Count == 0;

    private async Task OnSelectedItemChangedHandler(Disease value)
    {
        if (diseasesInDB != null)
        {
            if (value.DiseaseId != 0 && !Diseases.Contains(value))
            {
                Diseases.Add(value);
            }
            Advices = await GetAdvicesAsync();
            await AdviceDataChanged.InvokeAsync(Advices);
        }
    }

    private async Task<List<Advice>> GetAdvicesAsync()
    {
        if (UserSession.UserInfo == null)
        {
            Navigation.NavigateTo("/");
            return new List<Advice>();
        }

        var list = from disease in Diseases select disease.DiseaseId;
        if (list.Any())
        {
            var result = await Http.PostAuthorizedJsonAsync(UserSession.UserInfo.Token, "Prescription/advices", list.ToList());
            return await result.Content.ReadFromJsonAsync<List<Advice>>() ?? Advices;
        }
        else
        {
            return new List<Advice>();
        }
    }


    private async Task RemoveRecord(Disease record)
    {
        Diseases.Remove(record);
        Advices = await GetAdvicesAsync();
        await AdviceDataChanged.InvokeAsync(Advices);
    }

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserInfo == null)
        {
            Navigation.NavigateTo("/");
            return;
        }
        diseasesInDB = await Http.GetAuthorizedJsonAsync<List<Disease>>(UserSession.UserInfo.Token, $"Prescription/diseases");
        await base.OnInitializedAsync();
    }
}
