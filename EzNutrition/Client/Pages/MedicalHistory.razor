@page "/medicalhistory"
@using EzNutrition.Client.Services;
@using EzNutrition.Shared.Data.Entities;
@using EzNutrition.Shared.Utilities;
@inject HttpClient Http
@inject UserSessionService UserSession
@inject NavigationManager Navigation

<h3>病史记录</h3>
<div class="container">
    <div class="row mb-2">
        <div class="col-md-2 mb-2">
            <input class="form-control" @bind="@NewRecord" list="diseasesListInDB" placeholder="Internal Code" />
            @if (diseasesInDB != null)
            {
                <datalist id="diseasesListInDB">
                    @foreach (var item in diseasesInDB)
                    {
                        <option value="@item.DiseaseId">@item.FriendlyName</option>
                    }
                </datalist>
            }
        </div>
        <div class="col-md-4 mb-2">
            <input class="form-control" @bind="@newRecord.ICD10" readonly placeholder="ICD10(尚未实现)" />
        </div>
        <div class="col-md-4 mb-2">
            <input class="form-control" @bind="@newRecord.FriendlyName" readonly placeholder="Diagnosis Name" />
        </div>
        <div class="col-md-2 mb-2">
            <button class="btn btn-primary" @onclick="AddRecord">添加记录</button>
        </div>
    </div>
    @foreach (var record in Diseases)
    {
        <div class="row mb-2">
            <div class="col-md-2 mb-2">
                <input class="form-control" value="@record.DiseaseId" readonly list="diseasesListInDB" placeholder="Internal Code" />
            </div>
            <div class="col-md-4 mb-2">
                <input class="form-control" value="@record.ICD10" readonly placeholder="ICD10(尚未实现)" />
            </div>
            <div class="col-md-4 mb-2">
                <input class="form-control" value="@record.FriendlyName" readonly placeholder="Diagnosis Name" />
            </div>
            <div class="col-md-2 mb-2">
                <button class="btn btn-danger" @onclick="async () =>await RemoveRecord(record)">删除记录</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Disease>? diseasesInDB;
    private int? NewRecord
    {
        get => null;
        set
        {
            SetNewRecord(value);
        }
    }
    private Disease newRecord = new();

    public List<Disease> Diseases { get; set; } = new List<Disease>();

    [Parameter]
    public List<Advice> Advices { get; set; } = new List<Advice>();

    [Parameter]
    public EventCallback<List<Advice>> AdviceDataChanged { get; set; }



    private bool IsRemoveDisabled => Diseases.Count == 0;

    private void SetNewRecord(int? e)
    {
        if (diseasesInDB != null && e != null)
        {
            newRecord = diseasesInDB.FirstOrDefault(x => x.DiseaseId == e) ?? newRecord;
        }
    }

    private async Task AddRecord()
    {
        if (diseasesInDB != null)
        {
            if (newRecord.DiseaseId != 0 && !Diseases.Contains(newRecord))
            {
                Diseases.Add(newRecord);
            }
            newRecord = new();
            Advices = await GetAdvicesAsync();
            await AdviceDataChanged.InvokeAsync(Advices);
        }
    }

    private async Task<List<Advice>> GetAdvicesAsync()
    {
        if (UserSession.UserInfo == null)
        {
            Navigation.NavigateTo("/");
            return new List<Advice>();
        }

        var list = from disease in Diseases select disease.DiseaseId;
        if (list.Any())
        {
            var result = await Http.PostAuthorizedJsonAsync(UserSession.UserInfo.Token, "Prescription/advices", list.ToList());
            return await result.Content.ReadFromJsonAsync<List<Advice>>() ?? Advices;
        }
        else
        {
            return new List<Advice>();
        }
    }


    private async Task RemoveRecord(Disease record)
    {
        Diseases.Remove(record);
        Advices = await GetAdvicesAsync();
        await AdviceDataChanged.InvokeAsync(Advices);
    }

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserInfo == null)
        {
            Navigation.NavigateTo("/");
            return;
        }
        diseasesInDB = await Http.GetAuthorizedJsonAsync<List<Disease>>(UserSession.UserInfo.Token, $"Prescription/diseases");
        await base.OnInitializedAsync();
    }
}
