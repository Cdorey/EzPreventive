@page "/usercenter"
@using EzNutrition.Client.Models;
@using EzNutrition.Client.Services;
@using EzNutrition.Shared.Utilities;
@using EzNutrition.Shared.Data.Entities;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel
@using System.Text;
@inject UserSessionService UserSession
@inject NavigationManager Navigation
@inject IMessageService Message
@inject IHttpClientFactory HttpClientFactory

<h3>用户中心</h3>
<Title Level="3">登录以开始</Title>
<Paragraph>BBS测试用户EpiMan，密码I_am_epiman</Paragraph>
<Paragraph>这个账户不能用于调整模型，不过反正调整模型功能暂时还没做出来</Paragraph>
<Form Model="@innerModel">
    <FormItem Label="用户名">
        <Input @bind-Value="@context.Username" />
    </FormItem>
    <FormItem Label="密码">
        <InputPassword @bind-Value="@context.Password" />
    </FormItem>
    <FormItem>
        <Button Type="@ButtonType.Primary" OnClick="Login">登录</Button>
        <Button OnClick="Regist">注册</Button>
    </FormItem>
</Form>
@if (!string.IsNullOrEmpty(errorInfo))
{
    <Alert Message=@errorInfo Type="@AlertType.Error" />
}

<Button OnClick="OnEERsChanged" />
@code {

    public class Model
    {
        [Required, DisplayName("User Name")]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    private Model innerModel = new Model();

    private string? errorInfo;


    private bool IsLoading { get; set; } = false;

    private async Task OnEERsChanged()
    {
        try
        {
            IsLoading = true;
            var postRes = await HttpClientFactory.CreateClient("Authorize").GetFromJsonAsync<List<dynamic>>("Admin/User");

        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task Login()
    {
        try
        {
            await UserSession.SignInAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }

    private async Task Regist()
    {
        try
        {
            await UserSession.RegistAsync(innerModel.Username, innerModel.Password);
        }
        catch (Exception ex)
        {
            errorInfo = ex.Message;
        }
    }

}
